#pragma once

#include <stdbool.h>

#define _VIRTUAL_SCAN_CODE 0xE0

typedef enum
{
    // keys (single scancode)
    K_SINGLE_QUOTE = 0x28,
    K_COMMA = 0x33,
    K_DASH = 0x0C,
    K_DOT = 0x34,
    K_SLASH = 0x35,
    K_0 = 0x0B,
    K_1 = 0x02,
    K_2 = 0x03,
    K_3 = 0x04,
    K_4 = 0x05,
    K_5 = 0x06,
    K_6 = 0x07,
    K_7 = 0x08,
    K_8 = 0x09,
    K_9 = 0x0A,
    K_SEMICOLON = 0x27,
    K_EQUAL = 0x0D,
    K_A = 0x1E,
    K_BKSP = 0x0E,
    K_B = 0x30,
    K_CAPS = 0x3A,
    K_C = 0x2E,
    K_D = 0x20,
    K_END = 0x4F,
    K_ENTER = 0x1C,
    K_ESC = 0x01,
    K_E = 0x12,
    K_F10 = 0x44,
    K_F11 = 0x57,
    K_F12 = 0x58,
    K_F1 = 0x3B,
    K_F2 = 0x3C,
    K_F3 = 0x3D,
    K_F4 = 0x3E,
    K_F5 = 0x3F,
    K_F6 = 0x40,
    K_F7 = 0x41,
    K_F8 = 0x42,
    K_F9 = 0x43,
    K_F = 0x21,
    K_G = 0x22,
    K_H = 0x23,
    K_I = 0x17,
    K_J = 0x24,
    K_KP_TIMES = 0x37,
    K_KP_PLUS = 0x4E,
    K_KP_MINUS = 0x4A,
    K_KP_DOT = 0x53,
    K_KP_0 = 0x52,
    K_KP_1 = 0x4F,
    K_KP_2 = 0x50,
    K_KP_3 = 0x51,
    K_KP_4 = 0x4B,
    K_KP_5 = 0x4C,
    K_KP_6 = 0x4D,
    K_KP_7 = 0x47,
    K_KP_8 = 0x48,
    K_KP_9 = 0x49,
    K_K = 0x25,
    K_L_ALT = 0x38,
    K_L_CTRL = 0x1D,
    K_L = 0x26,
    K_L_SHFT = 0x2A,
    K_M = 0x32,
    K_NUM = 0x45,
    K_N = 0x31,
    K_O = 0x18,
    K_P = 0x19,
    K_Q = 0x10,
    K_R = 0x13,
    K_R_SHFT = 0x36,
    K_SCROLL = 0x46,
    K_SPACE = 0x39,
    K_S = 0x1F,
    K_TAB = 0x0F,
    K_T = 0x14,
    K_U = 0x16,
    K_V = 0x2F,
    K_W = 0x11,
    K_X = 0x2D,
    K_Y = 0x15,
    K_Z = 0x2C,
    K_OPENING_SQUARE_BRACKET = 0x1A,
    K_BACKSLASH = 0x2B,
    K_CLOSING_SQUARE_BRACKET = 0x1B,
    K_BACKTICK = 0x29,
    K_APPS = 0x5D,
    K_DELETE = 0x53,
    K_INSERT = 0x52,
    K_HOME = 0x47,
    K_KP_DIV = 0x35,
    K_PG_DN = 0x51,
    K_PG_UP = 0x49,

    // keys (multiple scancode)
    _K_D_ARROW = 0x50,
    _K_L_ARROW = 0x4B,
    _K_R_ARROW = 0x4D,
    _K_U_ARROW = 0x48,
    _K_R_ALT = 0x38,
    _K_R_CTRL = 0x1D,
    _K_R_GUI = 0x5C,
    _K_L_GUI = 0x5B,
    _K_KP_EN = 0x1C,

    // special keys (virtual scancode)
    K_D_ARROW = ((_VIRTUAL_SCAN_CODE << 8) | _K_D_ARROW),
    K_L_ARROW = ((_VIRTUAL_SCAN_CODE << 8) | _K_L_ARROW),
    K_R_ARROW = ((_VIRTUAL_SCAN_CODE << 8) | _K_R_ARROW),
    K_U_ARROW = ((_VIRTUAL_SCAN_CODE << 8) | _K_U_ARROW),
    K_R_ALT = ((_VIRTUAL_SCAN_CODE << 8) | _K_R_ALT),
    K_R_CTRL = ((_VIRTUAL_SCAN_CODE << 8) | _K_R_CTRL),
    K_R_GUI = ((_VIRTUAL_SCAN_CODE << 8) | _K_R_GUI),
    K_L_GUI = ((_VIRTUAL_SCAN_CODE << 8) | _K_L_GUI),
    K_KP_EN = ((_VIRTUAL_SCAN_CODE << 8) | _K_KP_EN)
} keyboard_key_t;

char get_char(keyboard_key_t key, bool shift);
bool is_shift_on(void);
bool is_key_pressed(keyboard_key_t key);
void register_keyboard(void (*handler)(keyboard_key_t key));
